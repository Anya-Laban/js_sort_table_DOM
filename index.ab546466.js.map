{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAW,EAAG,EAAM,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EACvC,EAAO,EAAM,OAAO,CAAC,EAAE,CAgC7B,SAAS,EAAmB,CAAG,EAG7B,MAAO,CAAC,MAFW,EAAI,OAAO,CAAC,QAAS,IAG1C,CAlCA,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAS,CAA1B,EACE,EAAQ,gBAAgB,CAAC,QAAS,SAAC,CAAnC,EAGE,IAAM,EAAa,AAFL,EAAG,EAAK,IAAI,EAEF,IAAI,CAAC,SAAC,CAAA,CAAK,CAAnC,EACE,IAAM,EAAU,EAAI,KAAK,CAAC,EAAM,CAAC,WAAW,CACtC,EAAU,EAAI,KAAK,CAAC,EAAM,CAAC,WAAW,CAE5C,OAAQ,GACN,KAAK,EACL,KAAK,EACH,OAAO,EAAQ,aAAa,CAAC,EAC/B,MAAK,EACL,KAAK,EACH,GAAI,CAAC,EAAmB,IAAY,CAAC,EAAmB,GACtD,OAAO,EAGT,OACE,SAAS,EAAQ,OAAO,CAAC,QAAS,IAAK,IACvC,SAAS,EAAQ,OAAO,CAAC,QAAS,IAAK,GAE7C,CACF,EAEA,CAAA,EAAK,SAAS,CAAG,GACjB,EAAW,OAAO,CAAC,SAAC,CAApB,EAA4B,OAAA,EAAK,WAAW,CAAC,E,EAC/C,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar headers = _to_consumable_array(table.tHead.rows[0].cells);\nvar body = table.tBodies[0];\nheaders.forEach(function(element, index) {\n    element.addEventListener(\"click\", function(e) {\n        var rows = _to_consumable_array(body.rows);\n        var sortedRows = rows.sort(function(tr1, tr2) {\n            var tr1Text = tr1.cells[index].textContent;\n            var tr2Text = tr2.cells[index].textContent;\n            switch(index){\n                case 0:\n                case 1:\n                    return tr1Text.localeCompare(tr2Text);\n                case 2:\n                case 3:\n                    if (!canConvertToNumber(tr1Text) || !canConvertToNumber(tr2Text)) return 0;\n                    return parseInt(tr1Text.replace(/[$,]/g, \"\"), 10) - parseInt(tr2Text.replace(/[$,]/g, \"\"), 10);\n            }\n        });\n        body.innerHTML = \"\";\n        sortedRows.forEach(function(row) {\n            return body.appendChild(row);\n        });\n    });\n});\nfunction canConvertToNumber(str) {\n    var cleanedStr = str.replace(/[$,]/g, \"\");\n    return !isNaN(cleanedStr);\n}\n\n//# sourceMappingURL=index.ab546466.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst headers = [...table.tHead.rows[0].cells];\nconst body = table.tBodies[0];\n\nheaders.forEach((element, index) => {\n  element.addEventListener('click', (e) => {\n    const rows = [...body.rows];\n\n    const sortedRows = rows.sort((tr1, tr2) => {\n      const tr1Text = tr1.cells[index].textContent;\n      const tr2Text = tr2.cells[index].textContent;\n\n      switch (index) {\n        case 0:\n        case 1:\n          return tr1Text.localeCompare(tr2Text);\n        case 2:\n        case 3:\n          if (!canConvertToNumber(tr1Text) || !canConvertToNumber(tr2Text)) {\n            return 0;\n          }\n\n          return (\n            parseInt(tr1Text.replace(/[$,]/g, ''), 10) -\n            parseInt(tr2Text.replace(/[$,]/g, ''), 10)\n          );\n      }\n    });\n\n    body.innerHTML = '';\n    sortedRows.forEach((row) => body.appendChild(row));\n  });\n});\n\nfunction canConvertToNumber(str) {\n  const cleanedStr = str.replace(/[$,]/g, '');\n\n  return !isNaN(cleanedStr);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","headers","tHead","rows","cells","body","tBodies","canConvertToNumber","str","isNaN","replace","forEach","element","index","addEventListener","e","sortedRows","sort","tr1","tr2","tr1Text","textContent","tr2Text","localeCompare","parseInt","innerHTML","row","appendChild"],"version":3,"file":"index.ab546466.js.map"}